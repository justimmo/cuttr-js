{"version":3,"sources":["cuttr.js"],"names":["root","factory","define","amd","module","exports","Cuttr","this","CUTTR_LICENSE","el","options","self","Object","create","prototype","originalContent","document","querySelectorAll","contentVisibilityState","contentTruncationState","truncate","length","ending","loadedClass","readMore","readMoreText","readLessText","readMoreBtnTag","afterExpand","readMoreBtnAdditionalClasses","keys","forEach","key","truncateIt","thisElement","str","thisIndex","dataset","cuttrIndex","truncateMethod","cuttrMethod","substring","words","split","sentences","splice","join","_str$match","match","btnSelectorClass","btnAriaExpanded","currentElement","addReadMore","updated","btnExists","console","cuttrReadmore","cuttrReadless","btnPosition","cuttrReadmorePosition","readMoreBtnPosition","btnTag","cuttrReadmoreTag","readMoreBtnSelectorClass","cuttrReadmoreAdditionalClasses","nextElementSibling","addEventListener","updateContent","target","classList","btnAdditionalClasses","btnText","replace","contains","querySelector","insertAdjacentHTML","btnMarkup","event","truncatedContent","previousElementSibling","parentNode","currentContent","innerHTML","truncateLength","cuttrLength","truncateEnding","cuttrEnding","currentElements","elementsToTruncate","trim","thisBtnPosition","showError","type","text","window","expandContent","selector","i","call","truncateContent","removeChild","removeAttribute","afterTruncate","destroy","data","remove","dataIndex","prepare","RegExp","test","domain","indexOf","displayWarnings","isAuthorized","contentToTitle","cuttrTitle","title","setAttribute","push","textContent","jQuery","$","fn","each","e","element","extend","log"],"mappings":"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","file":"cuttr.min.js","sourcesContent":["/*!\n * Cuttr 1.4.1\n * https://github.com/d-e-v-s-k/cuttr-js\n *\n * @license GPLv3 for open source use only\n * or Cuttr Commercial License for commercial use\n * https://cuttr.kulahs.de/pricing/\n *\n * Copyright (C) 2022 https://cuttr.kulahs.de/ - A project by DEVSK\n **/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.Cuttr = factory();\n    }\n}(this, function () {\n\n    //  private global vars\n    let CUTTR_LICENSE = true;\n\n    //  init Cuttr\n    const Cuttr = function (el, options){\n        'use strict';\n\n        const self = Object.create(Cuttr.prototype);\n\n        /**\n         * Default settings\n         */\n        self.options = {\n            //  global data\n            elementsToTruncate:  typeof el === 'string' ? document.querySelectorAll(el) : el,\n            originalContent: [],\n            contentVisibilityState: [],\n            contentTruncationState: [],\n\n            //  set default options\n            truncate: 'characters', // truncate method [characters|words|sentences]\n            length: 100,  //  truncation limit\n            ending: '...',    //  truncation ending string\n            loadedClass: 'cuttr--loaded', //  class to set when truncation finished\n            title: false,    //  add original content to elements title tag\n            readMore: false, // read more button enabled/disabled\n            readMoreText: 'read more',\n            readLessText: 'read less',\n            readMoreBtnPosition: 'after',  // [after|inside]\n            readMoreBtnTag: 'button', //  read-more button tag [button|a|...]\n            readMoreBtnSelectorClass: 'cuttr__readmore', //  read-more button selector\n            readMoreBtnAdditionalClasses: '',\n\n            //  callback functions\n            afterTruncate: function(){},\n            afterExpand: function(){},\n\n            //  private options\n            dataIndex: 'data-cuttr-index',   // cuttr index data attribute\n        };\n\n        /**\n         * User defined options\n         */\n        if (options) {\n            Object.keys(options).forEach(function (key){\n                self.options[key] = options[key];\n            });\n        }\n\n\n        const init = function () {\n            prepare.call(this);\n        };\n\n\n        /*\n            prepare cuttable elements\n         */\n        function prepare() {\n\n            const isAuthorized = self.options && new RegExp('([\\\\d\\\\w]{8}-){3}[\\\\d\\\\w]{8}|^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$').test(self.options['li'+'cen'+'seK' + 'e' + 'y']) || document.domain.indexOf('cuttr'+'.' +'kul' + 'ahs' + '.' + 'de') > -1;\n\n            //  return if no target element defined\n            if (!self.options.elementsToTruncate) {\n                return;\n            } else {\n                displayWarnings(isAuthorized);\n            }\n\n            //  set element type depending on source\n            if ( !('length' in self.options.elementsToTruncate) )\n                self.options.elementsToTruncate = [self.options.elementsToTruncate];\n\n            //  loop through target elements to truncate\n            for (let i = 0; i < self.options.elementsToTruncate.length; i++) {\n\n                const currentElement  = self.options.elementsToTruncate[i];\n                const currentContent  = currentElement.innerHTML;\n                const truncateLength  = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n                const truncateEnding  = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n                const contentToTitle  = (currentElement.dataset.cuttrTitle) ? currentElement.dataset.cuttrTitle : self.options.title;\n                let truncatedContent;\n\n                //  add truncate-element index to element\n                currentElement.setAttribute(self.options.dataIndex, i);\n\n                //  temporary save elements original content\n                self.options.originalContent.push(currentContent);\n\n                //  truncate content\n                truncatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n\n                //  set title attr with original text content\n                if (contentToTitle)\n                    currentElement.title = currentElement.textContent.trim();\n\n                //  set new content\n                currentElement.innerHTML = truncatedContent;\n\n                //  add read-more button if current content is truncated\n                if (self.options.contentTruncationState[i]) {\n\n                    if (self.options.readMore)\n                        addReadMore(currentElement);\n\n                    currentElement.classList += ' ' + self.options.loadedClass;\n\n                }\n\n                //  here go the callbacks\n                self.options.afterTruncate.call(currentElement);\n\n            }\n\n        }\n\n\n        /*\n            truncate text to specific length\n        */\n        function truncateIt(thisElement, str, length, ending) {\n\n            const thisIndex       = thisElement.dataset.cuttrIndex;\n            const truncateMethod  = (thisElement.dataset.cuttrMethod) ? thisElement.dataset.cuttrMethod : self.options.truncate;\n\n            //  set defaults\n            if (length == null) {\n                length = 100;\n            }\n\n            //  set defaults\n            if (ending == null) {\n                ending = '...';\n            }\n\n            //  truncate content based on method\n            switch (truncateMethod) {\n\n                //  truncate characters only\n                case 'characters':\n\n                    //  check if content (string) is longer than truncation limit\n                    if (str.length > length) {\n\n                        //  set current content truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n\n                        //  return new string\n                        return str.substring(0, length - ending.length) + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate words\n                case 'words':\n\n                    const words = str.split(/ (?=[^>]*(?:<|$))/);\n\n                    //  check if content (string) is longer than truncation limit\n                    if (words.length > length) {\n\n                        //  set current content truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        //  split spaces followed by sequence of characters are NOT greater-than signs, less-than sign\n                        return words.splice(0,length).join(' ') + ' ' + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate full sentences\n                case 'sentences':\n\n                    const sentences = str.match(/[^\\.!\\?]+[\\.!\\?]+/g) ?? [];\n\n                    //  check if content (string) is longer than truncation limit\n                    if (sentences.length > length) {\n\n                        //  set current content truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        return sentences.splice(0,length).join(' ') + ' ' + ending + ' ';\n\n                    } else {\n                        return str;\n                    }\n\n                    break;\n\n                //  truncate characters by default\n                default:\n\n                    //  check if content (string) is longer than truncation limit\n                    if (str.length > length) {\n\n                        //  set current contetn truncation true and return truncated string\n                        self.options.contentTruncationState[thisIndex] = true;\n                        //  set visibility state\n                        self.options.contentVisibilityState[thisIndex] = false;\n                        //  return new string\n                        return str.substring(0, length - ending.length) + ending;\n\n                    } else {\n                        return str;\n                    }\n\n            }\n\n        }\n\n\n        /*\n            append read more button\n        */\n        function addReadMore(thisElement, updated) {\n\n            const currentElement      = thisElement;\n            const thisIndex           = currentElement.dataset.cuttrIndex;\n            const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n            const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n            const btnPosition         = (currentElement.dataset.cuttrReadmorePosition) ? currentElement.dataset.cuttrReadmorePosition : self.options.readMoreBtnPosition;\n            const btnTag              = (currentElement.dataset.cuttrReadmoreTag) ? currentElement.dataset.cuttrReadmoreTag : self.options.readMoreBtnTag;\n            const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n            const btnAdditionalClasses = (currentElement.dataset.cuttrReadmoreAdditionalClasses) ? currentElement.dataset.cuttrReadmoreAdditionalClasses : self.options.readMoreBtnAdditionalClasses;\n            const btnText             = (self.options.contentVisibilityState[thisIndex]) ? readLessText : readMoreText;\n            const btnAriaExpanded     = (self.options.contentVisibilityState[thisIndex]) ? 'true' : 'false';\n            const btnMarkup           = ' <' + btnTag + ' aria-expanded=\"' + btnAriaExpanded + '\" class=\"' + self.options.readMoreBtnSelectorClass + ' ' + btnAdditionalClasses + '\">' + btnText.replace(/<[^>]*>/g, \"\") + '</' + btnTag + '>';\n            let btnExists;\n\n            //  check for button existence depending on btn position\n            if (btnPosition == 'after' && currentElement.nextElementSibling) {\n                btnExists = currentElement.nextElementSibling.matches(btnSelectorClass);\n            } else if (btnPosition == 'inside') {\n                btnExists = currentElement.querySelector(btnSelectorClass);\n            }\n\n            //  insert element only if it doesn't exist\n            if (!btnExists) {\n\n                //  add read-more button to dom\n                switch (btnPosition) {\n                    case 'after':\n                        currentElement.insertAdjacentHTML('afterend', btnMarkup);\n                        break;\n                    case 'inside':\n                        currentElement.insertAdjacentHTML('beforeend', btnMarkup);\n                        break;\n                    default:\n                        console.log('no matching read-more button position defined');\n                }\n\n                //  listen to read-more clicks - show/hide content\n                if (!updated) {\n\n                    if (btnPosition == 'after') {\n                        currentElement.nextElementSibling.addEventListener('click',function(event) {\n                            if (event.target && event.target.classList.contains(self.options.readMoreBtnSelectorClass)) {\n                                updateContent(event, btnPosition);\n                            }\n                        });\n                    } else if (btnPosition == 'inside') {\n                        currentElement.addEventListener('click',function(event) {\n                            if (event.target && event.target.classList.contains(self.options.readMoreBtnSelectorClass)) {\n                                updateContent(event, btnPosition);\n                            }\n                        });\n                    }\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            display original/truncated content\n        */\n        function updateContent(event, btnPosition) {\n\n            const currentElement      = (btnPosition == 'after') ? event.target.previousElementSibling : event.target.parentNode;\n            const currentContent      = currentElement.innerHTML;\n            const thisIndex           = currentElement.dataset.cuttrIndex;\n            const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n            const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n            const truncateLength      = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n            const truncateEnding      = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n            let truncatedContent;\n\n            //  show content if its currently truncated\n            if (!self.options.contentVisibilityState[thisIndex]) {\n\n                //  replace content with original content from element at specific index\n                currentElement.innerHTML = self.options.originalContent[thisIndex];\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = true;\n\n                if (btnPosition == 'inside' && self.options.readMore)\n                    addReadMore(currentElement, true);\n\n                //  update button text and aria\n                event.target.innerHTML = readLessText.replace(/<[^>]*>/g, \"\");\n                //event.target.setAttribute('aria-expanded', 'true');\n\n                //  here go the callbacks\n                self.options.afterExpand.call(currentElement);\n\n            //  truncate content if its shown completely currently\n            } else {\n\n                //  truncate content\n                truncatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n                currentElement.innerHTML = truncatedContent;\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = false;\n\n                if (btnPosition == 'inside' && self.options.readMore)\n                    addReadMore(currentElement, true);\n\n                //  update button text and aria\n                event.target.innerHTML = readMoreText.replace(/<[^>]*>/g, \"\");\n                //event.target.setAttribute('aria-expanded', 'false');\n\n                //  here go the callbacks\n                self.options.afterTruncate.call(currentElement);\n\n            }\n\n        }\n\n\n        /**\n         * Displays warnings\n         */\n        function displayWarnings(isAuthorized) {\n\n            if (!isAuthorized && CUTTR_LICENSE) {\n                //  declare global const to show error only once\n                CUTTR_LICENSE = false;\n                //  show error message\n                showError('error', 'Cuttr.js has a GPLv3 license and it requires a `licenseKey` option. Read about it here:');\n                showError('error', 'https://github.com/d-e-v-s-k/cuttr-js#options');\n            }\n\n        }\n\n\n        /*\n            public function\n            expand / show original content\n        */\n        self.expandContent = function(selector, btnPosition) {\n\n            let currentElements;\n\n            //  set specific element to expand or use current instance node\n            if (selector) {\n                currentElements = document.querySelectorAll(selector);\n            } else {\n                currentElements = self.options.elementsToTruncate;\n            }\n\n            for (let i = 0; i < currentElements.length; i++) {\n\n                const currentElement      = currentElements[i];\n                const currentContent      = currentElement.innerHTML;\n                const thisIndex           = currentElement.dataset.cuttrIndex;\n                const readLessText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadless : self.options.readLessText;\n                const thisBtnPosition     = (btnPosition) ? btnPosition : self.options.readMoreBtnPosition;\n                const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n                let btnExists;\n\n                //  show content if its currently truncated\n                if (!self.options.contentVisibilityState[thisIndex]) {\n\n                    //  replace content with original content from element at specific index\n                    currentElement.innerHTML = self.options.originalContent[thisIndex];\n\n                    //  set visibility state\n                    self.options.contentVisibilityState[thisIndex] = true;\n\n                    //  read-more handling only if enabled\n                    if (self.options.readMore) {\n\n                        if (thisBtnPosition == 'inside')\n                            addReadMore(currentElement, true);\n\n                        //  check for button existence depending on btn position\n                        if (thisBtnPosition == 'after') {\n                            btnExists = currentElement.nextElementSibling;\n                        } else if (thisBtnPosition == 'inside') {\n                            btnExists = currentElement.querySelector(btnSelectorClass);\n                        }\n\n                        //  update button text\n                        if(btnExists)\n                            btnExists.innerHTML = readLessText.replace(/<[^>]*>/g, \"\");\n\n                    }\n\n                    //  here go the callbacks\n                    self.options.afterExpand.call(currentElement);\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            public function\n            truncate / hide original content\n        */\n        self.truncateContent = function(selector, btnPosition) {\n\n            let currentElements;\n\n            //  set specific element to expand or use current instance node\n            if (selector) {\n                currentElements = document.querySelectorAll(selector);\n            } else {\n                currentElements = self.options.elementsToTruncate;\n            }\n\n            for (let i = 0; i < currentElements.length; i++) {\n\n                const currentElement      = currentElements[i];\n                const currentContent      = currentElement.innerHTML;\n                const thisIndex           = currentElement.dataset.cuttrIndex;\n                const readMoreText        = (currentElement.dataset.cuttrReadmore) ? currentElement.dataset.cuttrReadmore : self.options.readMoreText;\n                const thisBtnPosition     = (btnPosition) ? btnPosition : self.options.readMoreBtnPosition;\n                const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n                const truncateLength      = (currentElement.dataset.cuttrLength) ? currentElement.dataset.cuttrLength : self.options.length;\n                const truncateEnding      = (currentElement.dataset.cuttrEnding) ? currentElement.dataset.cuttrEnding : self.options.ending;\n                let truncatedContent;\n                let btnExists;\n\n                //  hide content if its currently fully visible\n                if (self.options.contentVisibilityState[thisIndex]) {\n\n                    //  truncate content\n                    truncatedContent = truncateIt(currentElement, currentContent.trim(), truncateLength, truncateEnding);\n                    currentElement.innerHTML = truncatedContent;\n\n                    //  set visibility state\n                    self.options.contentVisibilityState[thisIndex] = false;\n\n                    //  read-more handling only if enabled\n                    if (self.options.readMore) {\n\n                        if (thisBtnPosition == 'inside')\n                            addReadMore(currentElement, true);\n\n                        //  check for button existence depending on btn position\n                        if (thisBtnPosition == 'after') {\n                            btnExists = currentElement.nextElementSibling;\n                        } else if (thisBtnPosition == 'inside') {\n                            btnExists = currentElement.querySelector(btnSelectorClass);\n                        }\n\n                        //  update button text\n                        if(btnExists)\n                            btnExists.innerHTML = readMoreText.replace(/<[^>]*>/g, \"\");\n\n                    }\n\n                    //  here go the callbacks\n                    self.options.afterTruncate.call(currentElement);\n\n                }\n\n            }\n\n        }\n\n\n        /*\n            public function\n            restore the element to a pre-init state\n        */\n        self.destroy = function(selector, btnPosition) {\n\n            //  expand original content\n            self.expandContent(selector, btnPosition);\n\n            let currentElements;\n\n            //  set specific element to expand or use current instance node\n            if (selector) {\n                currentElements = document.querySelectorAll(selector);\n            } else {\n                currentElements = self.options.elementsToTruncate;\n            }\n\n            for (let i = 0; i < currentElements.length; i++) {\n\n                let currentElement      = currentElements[i];\n                const currentContent      = currentElement.innerHTML;\n                const thisIndex           = currentElement.dataset.cuttrIndex;\n                const thisBtnPosition     = (btnPosition) ? btnPosition : self.options.readMoreBtnPosition;\n                const btnSelectorClass    = '.' + self.options.readMoreBtnSelectorClass;\n                let btnExists;\n\n                //  set visibility state\n                self.options.contentVisibilityState[thisIndex] = true;\n\n                //  remove read-more  if enabled\n                if (self.options.readMore) {\n\n                    if (thisBtnPosition == 'inside')\n                        addReadMore(currentElement, true);\n\n                    //  check for button existence depending on btn position\n                    if (thisBtnPosition == 'after') {\n                        btnExists = currentElement.nextElementSibling;\n                    } else if (thisBtnPosition == 'inside') {\n                        btnExists = currentElement.querySelector(btnSelectorClass);\n                    }\n\n                    //  remove button\n                    if(btnExists)\n                        btnExists.parentNode.removeChild(btnExists);\n                    //btnExists.remove();\n\n                }\n\n                //  remove element classes\n                currentElement.classList.remove(self.options.loadedClass);\n\n                //  remove truncate-element index from element\n                currentElement.removeAttribute(self.options.dataIndex);\n\n                //  reset current truncation instance\n                currentElement = null;\n\n            }\n\n        }\n\n\n        //utils\n        /*\n            shows console message\n        */\n        function showError(type, text){\n            window.console && window.console[type] && window.console[type]('Cuttr: ' + text);\n        }\n\n        init();\n        return self;\n    };\n    return Cuttr;\n}));\n\n\n/**\n * jQuery adapter for Cuttr.js 1.4.0\n */\nif(window.jQuery && window.Cuttr){\n    (function ($, Cuttr) {\n        'use strict';\n\n        // No jQuery No Go\n        if (!$ || !Cuttr) {\n            //window.cuttr_utils.showError('error', 'jQuery is required to use the jQuery Cuttr adapter!');\n            console.log('ERROR - jQuery is required to use the jQuery Cuttr adapter!');\n            return;\n        }\n\n        $.fn.Cuttr = function (options) {\n            return this.each((e, element) => {\n                options = $.extend({}, options, {'$': $});\n                if (!$.data(element, 'Cuttr')) {\n                    $.data(element, 'Cuttr', new Cuttr(element, options));\n                }\n            });\n        };\n    })(window.jQuery, window.Cuttr);\n}\n"]}